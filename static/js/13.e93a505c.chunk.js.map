{"version":3,"file":"static/js/13.e93a505c.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","services/api.js","components/Form/Form.js","views/Movies.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\nmax-width: 1400px;\r\n  margin: 0 auto;\r\n  padding-top: 50px;\r\n  padding-bottom: 50px;\r\n`\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: -30px;\r\n  margin-left: -30px;\r\n  flex-wrap: wrap;\r\n  `\r\n\r\nexport const Item = styled.li`\r\n  text-align: center;\r\n flex-basis: calc(100% / 4 - 30px);\r\n  margin-top: 30px;\r\n  margin-left: 30px;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color:#ADD8E6;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  transform: scale(1);\r\n  transition: all 250ms linear;\r\n    :hover,\r\n:focus {\r\n  transform: scale(1.1);\r\n  transition: all 250ms linear;\r\n  `\r\n\r\nexport const Img = styled.img`\r\n    width: 100%;\r\n  height: 450px;\r\n  overflow: hidden;\r\n\r\n}\r\n`","import axios from 'axios'\r\n\r\nconst API_KEY = '0d2fc6d2597c3f501e7437cf40d08b03';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst PARAM = {\r\n  trending: '/trending/all/day',\r\n  search: '/search/movie',\r\n  movieID: '/movie',\r\n  reviews: '/reviews',\r\n  credits: '/credits',\r\n};\r\n\r\nexport const getTrendingMovies = async () => {\r\n    const { data } = await axios(`${BASE_URL}${PARAM.trending}?api_key=${API_KEY}`)\r\n    return data\r\n};\r\n\r\nexport const getMovieId = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}${PARAM.movieID}/${id}?api_key=${API_KEY}`)\r\n    return data;\r\n}\r\n\r\nexport const getCast = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\r\n \r\n    return data;\r\n}\r\nexport const getReviews = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\r\n \r\n    return data;\r\n}\r\n\r\nexport const getMovieSearch = async (request) => {\r\n    const { data } = await axios(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${request}`);\r\n\r\n    return data;\r\n}","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function Form({getData}) {\r\n    const [request, setRequest] = useState('');\r\n    \r\n    \r\n    const valueRequest = (e) => {\r\n        setRequest(e.target.value)\r\n    };\r\n\r\n    const handleSubmit = values => {\r\n        values.preventDefault();\r\n        // setResultSearch(await getMovieSearch(request));\r\n        getData(request);\r\n        reset();\r\n    };\r\n    const reset = () => {\r\n        setRequest('')\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" onChange={valueRequest} value={request} placeholder=\"Введите название фильма\" />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            \r\n        </>\r\n      \r\n    )\r\n};\r\n\r\nForm.propTypes = {\r\n  getData: PropTypes.func.isRequired,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { nanoid } from 'nanoid';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\nimport {getMovieSearch } from '../services/api'\r\nimport Form from '../components/Form/Form'\r\nimport * as css from '../components/Cast/Cast.styled'\r\n\r\nexport default function Movies(params) {\r\n    // const [request, setRequest] = useState('');\r\n    const [resultSearch, setResultSearch] = useState('');\r\n    const [resultRequest, setResultRequest] = useState(JSON.parse(localStorage.getItem(\"m0vies\")));\r\n    const [error, setError] = useState(null);\r\n    // const [loading, setLoading] = useState(false);\r\n    \r\n     const notify = (messege) => {\r\n        toast.error(messege)\r\n    };\r\n\r\n    const getData = (result) => {\r\n           if (result === '') {\r\n         notify('Введите запрос')  \r\n    }\r\n        setResultSearch(result);\r\n    };\r\n    \r\n\r\n \r\n   useEffect(() => {\r\n  if (resultSearch === '') { \r\n         return\r\n        }\r\n       \r\n                (async () => {\r\n                    try {\r\n                        const {results} = await getMovieSearch(resultSearch);\r\n                    setResultRequest(results);\r\n                   localStorage.setItem(\"m0vies\", JSON.stringify(results));\r\n                } catch (error) {\r\n                    setError(error);\r\n                    notify(error.message);                   \r\n                }\r\n                    \r\n                \r\n        })();\r\n    }, [resultSearch]);\r\n  \r\n\r\n    return (     \r\n        <>\r\n            <Form getData={getData} />\r\n            <css.Wrapper>\r\n            {resultRequest && (\r\n                <>\r\n          \r\n                    <css.List>  \r\n                    {resultRequest.map(movie =>\r\n                <css.Item key={movie.id}>\r\n                       <Link  to={`${movie.id}`} state={{ from: \"/movies\" }}>\r\n                <css.Img src={movie.poster_path &&\r\n                     `https://image.tmdb.org/t/p/w300${movie.poster_path}`\r\n                  \r\n                } alt={movie.name ? movie.name : movie.title} />\r\n                 <p>{ movie.name ? movie.name : movie.title }</p>\r\n                 </Link>\r\n                 </css.Item>                       \r\n                        )}                     \r\n                  </css.List>                                      \r\n                                \r\n                    </>\r\n                )}\r\n                </css.Wrapper>\r\n        <ToastContainer/> \r\n        </>\r\n      \r\n    )\r\n    \r\n    \r\n};\r\n"],"names":["Wrapper","styled","List","Item","Img","API_KEY","BASE_URL","PARAM","getTrendingMovies","axios","data","getMovieId","id","getCast","getReviews","getMovieSearch","request","Form","getData","useState","setRequest","reset","onSubmit","values","preventDefault","type","onChange","e","target","value","placeholder","Movies","params","resultSearch","setResultSearch","JSON","parse","localStorage","getItem","resultRequest","setResultRequest","setError","notify","messege","toast","useEffect","results","setItem","stringify","message","result","map","movie","to","state","from","src","poster_path","alt","name","title"],"sourceRoot":""}