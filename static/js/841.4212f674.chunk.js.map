{"version":3,"file":"static/js/841.4212f674.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","services/api.js","../node_modules/nanoid/index.browser.js","components/OneMovie/OneMovie.styled.js","components/Cast/Cast.js","views/CastPage.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","views/ReviewsPage.js","components/OneMovie/OneMovie.js","views/MovieDetailsView.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\nmax-width: 1400px;\r\n  margin: 0 auto;\r\n  padding-top: 50px;\r\n  padding-bottom: 50px;\r\n`\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: -30px;\r\n  margin-left: -30px;\r\n  flex-wrap: wrap;\r\n  `\r\n\r\nexport const Item = styled.li`\r\n  text-align: center;\r\n flex-basis: calc(100% / 4 - 30px);\r\n  margin-top: 30px;\r\n  margin-left: 30px;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color:#ADD8E6;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  transform: scale(1);\r\n  transition: all 250ms linear;\r\n    :hover,\r\n:focus {\r\n  transform: scale(1.1);\r\n  transition: all 250ms linear;\r\n  `\r\n\r\nexport const Img = styled.img`\r\n    width: 100%;\r\n  height: 450px;\r\n  overflow: hidden;\r\n\r\n}\r\n`","import axios from 'axios'\r\n\r\nconst API_KEY = '0d2fc6d2597c3f501e7437cf40d08b03';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst PARAM = {\r\n  trending: '/trending/all/day',\r\n  search: '/search/movie',\r\n  movieID: '/movie',\r\n  reviews: '/reviews',\r\n  credits: '/credits',\r\n};\r\n\r\nexport const getTrendingMovies = async () => {\r\n    const { data } = await axios(`${BASE_URL}${PARAM.trending}?api_key=${API_KEY}`)\r\n    return data\r\n};\r\n\r\nexport const getMovieId = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}${PARAM.movieID}/${id}?api_key=${API_KEY}`)\r\n    return data;\r\n}\r\n\r\nexport const getCast = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\r\n \r\n    return data;\r\n}\r\nexport const getReviews = async (id) => {\r\n    const { data } = await axios(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\r\n \r\n    return data;\r\n}\r\n\r\nexport const getMovieSearch = async (request) => {\r\n    const { data } = await axios(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${request}`);\r\n \r\n    return data;\r\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const OneMovieContainer = styled.div`\r\ntext-align: center;\r\n    display: flex;\r\n    width: 1400px;\r\n    padding: 50px 0px;\r\n    margin: auto;\r\n    \r\n`;\r\nexport const AdditionalLink = styled(NavLink)`\r\n text-decoration: none;\r\n        font-weight: 500;\r\n    font-size: 18px;\r\n\r\n    color: #2a363b;\r\n     :hover,\r\n  :focus,\r\n  :active {\r\n     color: #2196f3;\r\n  }\r\n&:not(:last-child) {\r\n margin-right: 25px;\r\n}\r\n   \r\n\r\n`;\r\n\r\nexport const OneMovieInformation = styled.div`\r\nbackground-color:#ADD8E6;\r\npadding: 30px 0px ;\r\n    \r\n`\r\n\r\nexport const OneMovieImg = styled.img`\r\nmargin-right: 50px;\r\nbox-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);\r\n`","import { nanoid } from 'nanoid';\r\nimport * as C from './Cast.styled'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Cast({ cast }) {\r\n\r\n    return (\r\n        <>\r\n            <C.Wrapper>\r\n                    <C.List>    \r\n                 {cast  && (\r\n                   cast.map( actor => (\r\n                      <C.Item key={nanoid()}>\r\n                           <C.Img src={\r\n                  actor.profile_path\r\n                    ? `https://image.tmdb.org/t/p/w300/${actor.profile_path}`\r\n                    : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\r\n                } alt={actor.name} />\r\n                           <p>{actor.name}</p>\r\n                        \r\n                </C.Item>\r\n                 ) ) \r\n                      )}              \r\n                </C.List>\r\n           </C.Wrapper>\r\n        \r\n             \r\n        </>\r\n    )\r\n};\r\n\r\nCast.propTypes = {\r\n  cast: PropTypes.array.isRequired,\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getCast } from '../services/api';\r\nimport Cast from \"../components/Cast/Cast\";\r\n\r\nexport  const CastPage = ()  => {\r\n    const { movieId } = useParams();\r\n    const [cast, setCast] = useState(null);\r\n    const [error, setError] = useState('');\r\n    \r\n    useEffect(() => {\r\n        (async () => {\r\n            if (movieId) {\r\n                try {\r\n                    const { cast } = await getCast(movieId); \r\n                    setCast(cast);\r\n                  \r\n                }\r\n                catch (error) {\r\n                     setError(error);\r\n                }\r\n            }\r\n\r\n        })();\r\n    }, [movieId]);\r\n\r\n    return (\r\n        <>\r\n            {cast && <Cast cast={cast} />}\r\n        </>\r\n    )\r\n   \r\n        \r\n            \r\n    \r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const ReviewsContainer = styled.div`\r\nwidth: 1400px;\r\nmargin: auto;\r\n`\r\n\r\n","import { nanoid } from 'nanoid';\r\nimport {ReviewsContainer} from './Reviews.styled'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Reviews( {reviews} ) {\r\n\r\n    return (\r\n        <ReviewsContainer>\r\n                \r\n            {reviews.length > 0 ? (\r\n                <>\r\n                    <ul>\r\n                    {reviews.map(movie => (\r\n                        <li key={nanoid()}>\r\n                            <h3>{movie.author}</h3>\r\n                            <p>{movie.created_at}</p>\r\n                            <p>{movie.content}</p>\r\n                        </li>\r\n                    ))}\r\n                     </ul>\r\n                </>\r\n            ) : <h2>У этого фильма нет reviews</h2>\r\n            }\r\n                   \r\n             </ReviewsContainer>\r\n        \r\n    );\r\n};\r\n\r\n  Reviews.propTypes = {\r\n  reviews: PropTypes.array.isRequired,\r\n};      ","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import Cast from \"../components/Cast/Cast\";\r\nimport { getReviews } from '../services/api';\r\nimport  Reviews  from '../components/Reviews/Reviews';\r\nexport const ReviewsPage = () => {\r\n    const { movieId } = useParams();\r\n    const [reviews, setReviews] = useState([]);\r\n    const [error, setError] = useState('');\r\n    \r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (movieId) {\r\n                try {\r\n                    const {results} = await getReviews(movieId);\r\n                    setReviews(results);\r\n                    \r\n                }\r\n                catch (error) {\r\n                    setError(error);\r\n                }\r\n            }\r\n        })();\r\n    }, [movieId])\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            {reviews && <Reviews reviews={reviews}/>}\r\n        </>\r\n)\r\n\r\n}\r\n\r\n    \r\n    // useEffect(() => {\r\n    //     (async () => {\r\n    //         if(movieId) {\r\n    //             try {\r\n    //                 const { cast } = await getCast(movieId);\r\n    //                 setCast(cast);\r\n                  \r\n    //             }\r\n    //             catch (error) {\r\n    //                  setError(error);\r\n    //             }\r\n    //         }\r\n\r\n    //     })();\r\n    // }, [movieId]);\r\n\r\n    // return (\r\n    //     <>\r\n    //         {cast && <Cast cast={cast} />}\r\n    //     </>\r\n    // )\r\n   ","import { Routes, Route, useParams, useLocation,} from 'react-router-dom'\r\nimport { nanoid } from 'nanoid';\r\nimport { AdditionalLink, OneMovieContainer, OneMovieInformation, OneMovieImg } from './OneMovie.styled'\r\nimport { CastPage } from '../../views/CastPage.js';\r\nimport { ReviewsPage } from '../../views/ReviewsPage.js';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function OneMovie({movie, notify}) {\r\n    const { poster_path,\r\n        title,\r\n        genres,\r\n        overview,\r\n        backdrop_path,\r\n        vote_average } = movie;\r\n    const { movieID } = useParams();\r\n    const genresAll = genres.map(genr => genr.name).join(' | ');\r\n\r\n    return (\r\n        <>\r\n            \r\n            <OneMovieContainer>\r\n              \r\n                <OneMovieImg src={poster_path &&\r\n                     `https://image.tmdb.org/t/p/w300${poster_path}`} alt={title} />\r\n                <div>\r\n                    <h2>{title}</h2>\r\n                    <p>User Score: {vote_average}</p>\r\n                    <h3>Overviev</h3>\r\n                    <p>{overview}</p>\r\n                    <h4>Genres</h4>\r\n                    <p key={nanoid()}>{genresAll} </p>                                    \r\n                </div>\r\n            </OneMovieContainer>\r\n            \r\n            <OneMovieInformation>\r\n                              \r\n              <AdditionalLink to=\"cast\" >Cast</AdditionalLink> \r\n                            \r\n                <AdditionalLink to=\"reviews\" >Reviews</AdditionalLink>   \r\n                </OneMovieInformation>\r\n               \r\n                <Routes>\r\n                     <Route  path={`cast`} element={<CastPage/>}></Route>  \r\n                <Route  path={`reviews`} element={<ReviewsPage/>}></Route> \r\n                </Routes>                                            \r\n            \r\n        </>\r\n    )\r\n};\r\n\r\nOneMovie.propTypes = {\r\n  movie: PropTypes.object.isRequired,\r\n};\r\n","import { useParams, useLocation, Link } from \"react-router-dom\"\r\nimport { useState, useEffect } from \"react\" \r\nimport { ToastContainer, toast } from 'react-toastify';\r\n    import 'react-toastify/dist/ReactToastify.css';\r\nimport * as moviesAPI from '../services/api'\r\nimport OneMovie from \"../components/OneMovie/OneMovie\";\r\n\r\nexport default function MovieDetailsView() {\r\n    const { movieId } = useParams();\r\n    const [movie, setMovie] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const location = useLocation();\r\n    const goBackLink = location.state?.from ?? \"/\";\r\n    const notify = (messege) => {\r\n        toast.error(messege)\r\n    };\r\n    useEffect(() => {\r\n                (async () => {\r\n            if(movieId) {\r\n                try {\r\n                    setMovie(await moviesAPI.getMovieId(movieId));\r\n                   \r\n                } catch (error) {\r\n                    setError(error);\r\n                    \r\n                    notify(error.message);                   \r\n                }\r\n                    }\r\n                    \r\n        })();\r\n    }, [movieId]);\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Link to={goBackLink}><button>To back</button></Link>\r\n            <>\r\n             {movie && (\r\n                          \r\n                    <OneMovie movie={movie}></OneMovie>\r\n                 ) \r\n                }\r\n                {error && (\r\n                     <ToastContainer/>\r\n                )\r\n\r\n                }\r\n            </>\r\n           \r\n           \r\n                \r\n    </>\r\n    )\r\n  \r\n};\r\n"],"names":["Wrapper","styled","List","Item","Img","API_KEY","BASE_URL","PARAM","getTrendingMovies","axios","data","getMovieId","id","getCast","getReviews","getMovieSearch","request","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","OneMovieContainer","AdditionalLink","NavLink","OneMovieInformation","OneMovieImg","Cast","cast","map","actor","src","profile_path","alt","name","CastPage","movieId","useParams","useState","setCast","setError","useEffect","ReviewsContainer","Reviews","reviews","length","movie","author","created_at","content","ReviewsPage","setReviews","results","OneMovie","poster_path","notify","title","genres","overview","vote_average","backdrop_path","genresAll","movieID","genr","join","to","path","element","MovieDetailsView","setMovie","error","goBackLink","useLocation","state","from","moviesAPI","messege","message","toast"],"sourceRoot":""}